{
  "openapi": "3.0.0",
  "servers": [
    {
      "description": "Sellix Developers API endpoint",
      "url": "https://dev.sellix.io/v1"
    }
  ],
  "info": {
    "description": "Sellix public API for developers to access merchant resources",
    "version": "1.0.0",
    "title": "Sellix Developers API",
    "x-logo": {
      "url": "https://cdn.sellix.io/static/logo/sellix-logo-black-smaller.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Sellix logo",
      "href": "https://sellix.io"
    }
  },
  "tags": [
    {
      "name": "Blacklists",
      "description": "Blacklist endpoints"
    },
    {
      "name": "Whitelists",
      "description": "Whitelist endpoints"
    },
    {
      "name": "Categories",
      "description": "Category endpoints"
    },
    {
      "name": "Coupons",
      "description": "Coupon endpoints"
    },
    {
      "name": "Feedback",
      "description": "Feedback endpoints"
    },
    {
      "name": "Orders",
      "description": "Order endpoints (also known as invoices)"
    },
    {
      "name": "Products",
      "description": "Product endpoints"
    },
    {
      "name": "Queries",
      "description": "Query endpoints"
    },
    {
      "name": "Payments",
      "description": "Payment endpoints"
    },
    {
      "name": "Customers",
      "description": "Customer endpoints"
    },
    {
      "name": "Subscriptions",
      "description": "Subscription endpoints"
    },
    {
      "name": "Licenses",
      "description": "License endpoints"
    }
  ],
  "paths": {
    "/blacklists": {
      "get": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "getBlacklists",
        "description": "List all the blacklists created on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/blacklistListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "createBlacklist",
        "description": "Create a blacklist",
        "requestBody": {
          "description": "blacklist JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "data"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "IP",
                      "COUNTRY",
                      "ISP",
                      "ASN",
                      "HOST"
                    ],
                    "example": "EMAIL"
                  },
                  "data": {
                    "type": "string",
                    "example": "example@sellix.io"
                  },
                  "note": {
                    "type": "string",
                    "example": "Blocking unwanted email."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/blacklists/{uniqid}": {
      "get": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "getBlacklist",
        "description": "Get a specific blacklist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/blacklist"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "deleteBlacklist",
        "description": "Delete a blacklist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "tags": [
          "Blacklists"
        ],
        "operationId": "updateBlacklist",
        "description": "Update a blacklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "requestBody": {
          "description": "blacklist JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "IP",
                      "COUNTRY",
                      "ISP",
                      "ASN",
                      "HOST"
                    ],
                    "example": "EMAIL"
                  },
                  "data": {
                    "type": "string",
                    "example": "example@sellix.io"
                  },
                  "note": {
                    "type": "string",
                    "example": "Blocking unwanted email."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/whitelists": {
      "get": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "getWhitelists",
        "description": "List all the whitelists created on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/whitelistListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "createWhitelist",
        "description": "Create a whitelist",
        "requestBody": {
          "description": "whitelist JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "data"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "IP",
                      "COUNTRY",
                      "ISP",
                      "ASN",
                      "HOST"
                    ],
                    "example": "EMAIL"
                  },
                  "data": {
                    "type": "string",
                    "example": "example@sellix.io"
                  },
                  "note": {
                    "type": "string",
                    "example": "Admitting known email."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/whitelists/{uniqid}": {
      "get": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "getWhitelist",
        "description": "Get a specific whitelist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/whitelist"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "deleteWhitelist",
        "description": "Delete a whitelist.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "tags": [
          "Whitelists"
        ],
        "operationId": "updateWhitelist",
        "description": "Update a whitelist",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "requestBody": {
          "description": "whitelist JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "EMAIL",
                      "IP",
                      "COUNTRY",
                      "ISP",
                      "ASN",
                      "HOST"
                    ],
                    "example": "EMAIL"
                  },
                  "data": {
                    "type": "string",
                    "example": "example@sellix.io"
                  },
                  "note": {
                    "type": "string",
                    "example": "Admitting known email."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "operationId": "getCategories",
        "description": "List all the categories created on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/categoryListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "operationId": "createCategory",
        "description": "Create a category",
        "requestBody": {
          "description": "category JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software"
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample8718521"
                    ]
                  },
                  "groups_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "5f42ada2b38a5"
                    ]
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/categories/{uniqid}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "operationId": "getCategory",
        "description": "Get a specific category.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/category"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "operationId": "deleteCategory",
        "description": "Delete a category.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "operationId": "updateCategory",
        "description": "Update a category",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "requestBody": {
          "description": "category JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software"
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample8718521"
                    ]
                  },
                  "groups_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "5f42ada2b38a5"
                    ]
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/coupons": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "operationId": "getCoupons",
        "description": "List all the coupons created on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/couponListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Coupons"
        ],
        "operationId": "createCoupon",
        "description": "Create a coupon",
        "requestBody": {
          "description": "coupon JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "discount_value"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "BLACK_FRIDAY"
                  },
                  "discount_value": {
                    "type": "integer",
                    "example": 35
                  },
                  "max_uses": {
                    "type": "integer",
                    "example": 50
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample8718521"
                    ]
                  },
                  "discount_type": {
                    "type": "string",
                    "enum": [
                      "PERCENTAGE",
                      "FIXED"
                    ],
                    "example": "PERCENTAGE"
                  },
                  "discount_order_type": {
                    "type": "string",
                    "enum": [
                      "TOTAL",
                      "QUANTITY"
                    ],
                    "description": "DEPRECATED",
                    "deprecated": true
                  },
                  "disabled_with_volume_discounts": {
                    "type": "boolean",
                    "example": true
                  },
                  "all_recurring_bill_invoices": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/coupons/{uniqid}": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "operationId": "getCoupon",
        "description": "Get a specific coupon.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/coupon"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Coupons"
        ],
        "operationId": "deleteCoupon",
        "description": "Delete a coupon.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "tags": [
          "Coupons"
        ],
        "operationId": "updateCoupon",
        "description": "Update a coupon",
        "requestBody": {
          "description": "coupon JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "BLACK_FRIDAY"
                  },
                  "discount_value": {
                    "type": "integer",
                    "example": 35
                  },
                  "max_uses": {
                    "type": "integer",
                    "example": 50
                  },
                  "products_bound": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sample8718521"
                    ]
                  },
                  "discount_type": {
                    "type": "string",
                    "enum": [
                      "PERCENTAGE",
                      "FIXED"
                    ],
                    "example": "PERCENTAGE"
                  },
                  "discount_order_type": {
                    "type": "string",
                    "enum": [
                      "TOTAL",
                      "QUANTITY"
                    ],
                    "description": "DEPRECATED",
                    "deprecated": true
                  },
                  "disabled_with_volume_discounts": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/feedback": {
      "get": {
        "tags": [
          "Feedback"
        ],
        "operationId": "feedbackListing",
        "description": "List the feedback received on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/feedbackListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/feedback/{uniqid}": {
      "get": {
        "tags": [
          "Feedback"
        ],
        "operationId": "getFeedback",
        "description": "Get a specific feedback.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/feedback"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/feedback/reply/{uniqid}": {
      "post": {
        "tags": [
          "Feedback"
        ],
        "operationId": "replyFeedback",
        "description": "Reply to a feedback",
        "requestBody": {
          "description": "JSON that contains the reply",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reply"
                ],
                "properties": {
                  "reply": {
                    "type": "string",
                    "example": "This is a feedback reply."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "operationId": "getOrders",
        "description": "List all the orders created on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoiceListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/orders/{uniqid}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "operationId": "getOrder",
        "description": "Get a specific order.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoice"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "getProducts",
        "description": "List all the products created on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/productListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "operationId": "createProduct",
        "description": "Create a product",
        "requestBody": {
          "description": "product JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "price",
                  "description",
                  "type"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software Activation Keys"
                  },
                  "price": {
                    "type": "number",
                    "format": "double",
                    "example": 12.5
                  },
                  "description": {
                    "type": "string",
                    "example": "Product description example."
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  },
                  "gateways": {
                    "$ref": "#/components/schemas/gateways"
                  },
                  "type": {
                    "type": "string",
                    "example": "SERIALS"
                  },
                  "serials": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "activation-key-#1"
                    ]
                  },
                  "serials_remove_duplicates": {
                    "type": "boolean",
                    "example": true
                  },
                  "service_text": {
                    "type": "string",
                    "example": null
                  },
                  "stock": {
                    "type": "integer",
                    "example": null
                  },
                  "dynamic_webhook": {
                    "type": "string",
                    "example": null
                  },
                  "stock_delimiter": {
                    "type": "string",
                    "example": ","
                  },
                  "min_quantity": {
                    "type": "integer",
                    "example": 1
                  },
                  "max_quantity": {
                    "type": "integer",
                    "example": 150
                  },
                  "delivery_text": {
                    "type": "string",
                    "example": "Thank you for the purchase!"
                  },
                  "custom_fields": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "example": null
                  },
                  "crypto_confirmations_needed": {
                    "type": "integer",
                    "example": 3
                  },
                  "max_risk_level": {
                    "type": "integer",
                    "example": 85
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "private": {
                    "type": "boolean",
                    "example": false
                  },
                  "block_vpn_proxies": {
                    "type": "boolean",
                    "example": true
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": null
                  },
                  "on_hold": {
                    "type": "boolean",
                    "example": false
                  },
                  "terms_of_service": {
                    "type": "string",
                    "example": "ToS to be agreed upon purchase."
                  },
                  "warranty": {
                    "type": "integer",
                    "example": 86400
                  },
                  "warranty_text": {
                    "type": "string",
                    "example": "Warranty description."
                  },
                  "remove_image": {
                    "type": "boolean",
                    "example": false
                  },
                  "remove_file": {
                    "type": "boolean",
                    "example": false
                  },
                  "volume_discounts": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "example": null
                  },
                  "recurring_interval": {
                    "type": "string",
                    "example": null
                  },
                  "recurring_interval_count": {
                    "type": "integer",
                    "example": null
                  },
                  "trial_period": {
                    "type": "integer",
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/products/{uniqid}": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "getProduct",
        "description": "Get a specific product.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/product"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "operationId": "deleteProduct",
        "description": "Delete a product.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "operationId": "updateProduct",
        "description": "Update a product",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "requestBody": {
          "description": "product JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "price",
                  "description",
                  "type"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Software Activation Keys"
                  },
                  "price": {
                    "type": "number",
                    "format": "double",
                    "example": 12.5
                  },
                  "description": {
                    "type": "string",
                    "example": "Product description example."
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  },
                  "gateways": {
                    "$ref": "#/components/schemas/gateways"
                  },
                  "type": {
                    "type": "string",
                    "example": "SERIALS"
                  },
                  "serials": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "activation-key-#1"
                    ]
                  },
                  "serials_remove_duplicates": {
                    "type": "boolean",
                    "example": true
                  },
                  "service_text": {
                    "type": "string",
                    "example": null
                  },
                  "stock": {
                    "type": "integer",
                    "example": null
                  },
                  "dynamic_webhook": {
                    "type": "string",
                    "example": null
                  },
                  "stock_delimiter": {
                    "type": "string",
                    "example": ","
                  },
                  "min_quantity": {
                    "type": "integer",
                    "example": 1
                  },
                  "max_quantity": {
                    "type": "integer",
                    "example": 150
                  },
                  "delivery_text": {
                    "type": "string",
                    "example": "Thank you for the purchase!"
                  },
                  "custom_fields": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "example": null
                  },
                  "crypto_confirmations_needed": {
                    "type": "integer",
                    "example": 3
                  },
                  "max_risk_level": {
                    "type": "integer",
                    "example": 85
                  },
                  "unlisted": {
                    "type": "boolean",
                    "example": false
                  },
                  "private": {
                    "type": "boolean",
                    "example": false
                  },
                  "block_vpn_proxies": {
                    "type": "boolean",
                    "example": true
                  },
                  "sort_priority": {
                    "type": "integer",
                    "example": 0
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": null
                  },
                  "on_hold": {
                    "type": "boolean",
                    "example": false
                  },
                  "terms_of_service": {
                    "type": "string",
                    "example": "ToS to be agreed upon purchase."
                  },
                  "warranty": {
                    "type": "integer",
                    "example": 86400
                  },
                  "warranty_text": {
                    "type": "string",
                    "example": "Warranty description."
                  },
                  "remove_image": {
                    "type": "boolean",
                    "example": false
                  },
                  "remove_file": {
                    "type": "boolean",
                    "example": false
                  },
                  "volume_discounts": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "example": null
                  },
                  "recurring_interval": {
                    "type": "string",
                    "example": null
                  },
                  "recurring_interval_count": {
                    "type": "integer",
                    "example": null
                  },
                  "trial_period": {
                    "type": "integer",
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/queries": {
      "get": {
        "tags": [
          "Queries"
        ],
        "operationId": "getQueries",
        "description": "List all the queries created on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/queryListing"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/queries/{uniqid}": {
      "get": {
        "tags": [
          "Queries"
        ],
        "operationId": "getQuery",
        "description": "Get a specific query.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/query"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/queries/reply/{uniqid}": {
      "post": {
        "tags": [
          "Queries"
        ],
        "operationId": "replyQuery",
        "description": "Add a reply to a query.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/queries/close/{uniqid}": {
      "post": {
        "tags": [
          "Queries"
        ],
        "operationId": "closeQuery",
        "description": "Close a query.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/queries/reopen/{uniqid}": {
      "post": {
        "tags": [
          "Queries"
        ],
        "operationId": "reopenQuery",
        "description": "Reopen a closed query.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "operationId": "createPayment",
        "description": "Create a payment",
        "requestBody": {
          "description": "payment JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Sellix Payment",
                    "description": "Required if product_id and cart are null. Defines the title of the purchase, can be the digital good's name or a brief summary of what the customer is paying for."
                  },
                  "product_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": null,
                    "description": "If specified value, currency and custom_fields will be taken from the product details."
                  },
                  "cart": {
                    "type": "object",
                    "required": [
                      "Products"
                    ],
                    "properties": {
                      "products": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "uniqid",
                            "unit_quantity"
                          ],
                          "properties": {
                            "uniqid": {
                              "type": "string",
                              "format": "uuid",
                              "example": "sample2bde8a50",
                              "description": "Unique ID of the product."
                            },
                            "unit_quantity": {
                              "type": "integer",
                              "example": 4,
                              "description": "Quantity of the product uniqid passed."
                            }
                          }
                        }
                      }
                    },
                    "description": "Other than product_id, a cart object can be specified if multiple products need to be purchased through the API.",
                    "example": null
                  },
                  "gateway": {
                    "type": "string",
                    "enum": [
                      "PAYPAL",
                      "STRIPE",
                      "SKRILL",
                      "PERFECT_MONEY",
                      "CASH_APP",
                      "BINANCE",
                      "BITCOIN",
                      "LITECOIN",
                      "ETHEREUM",
                      "BITCOIN_CASH",
                      "NANO",
                      "MONERO",
                      "SOLANA",
                      "RIPPLE",
                      "BINANCE_COIN",
                      "USDC:ERC20",
                      "USDC:BEP20",
                      "USDC:MATIC",
                      "USDC:SOL",
                      "USDT:ERC20",
                      "USDT:BEP20",
                      "USDT:MATIC",
                      "USDT:SOL",
                      "USDT:TRC20",
                      "TRON",
                      "BITCOIN_LN",
                      "CONCORDIUM",
                      "POLYGON",
                      "PEPE:ERC20",
                      "DAI:ERC20",
                      "DAI:BEP20",
                      "DAI:MATIC",
                      "WETH:BEP20",
                      "WETH:MATIC",
                      "APE:ERC20",
                      "APE:MATIC",
                      "SHIB:ERC20",
                      "SHIB:BEP20",
                      "SHIB:MATIC",
                      "USDC_NATIVE:MATIC",
                      "DOGECOIN",
                      "PYTH:SOL",
                      "BONK:SOL",
                      "JUP:SOL",
                      "JITO:SOL",
                      "WEN:SOL",
                      "RENDER:SOL",
                      "MOBILE:SOL",
                      "HNT:SOL"
                    ],
                    "example": null,
                    "description": "If null, the customer will be asked automatically to choose a gateway on the Sellix hosted /payment page. If product_id is specified, the gateway must be on in the product's gateways array."
                  },
                  "paypal_apm": {
                    "type": "string",
                    "enum": [
                      "bancontact",
                      "eps",
                      "trustly",
                      "mercado",
                      "paylater",
                      "sepa",
                      "venmo",
                      "blik",
                      "giropay",
                      "ideal",
                      "mybank",
                      "sofort",
                      "przelewy24",
                      "credit"
                    ],
                    "example": null,
                    "description": "If gateway is PAYPAL, a paypal_apm (PayPal Alternative Payment Method) can be specified. To retrieve the available PayPal APM for a specific customer session, please refer to the PayPal SDK using window.paypal.FUNDING and fundingSource to filter out available methods. You can also use our documentation on how to process white_label payments."
                  },
                  "credit_card": {
                    "type": "boolean",
                    "example": null,
                    "description": "If gatewa is PAYPAL and no paypal_apm is passed, specify credit_card true to land the customer on the PayPal managed credit card page instead of the onboarding login."
                  },
                  "lex_payment_method": {
                    "type": "string",
                    "description": "DEPRECATED: If gateway is LEX_HOLDINGS_GROUP, method to be used for the customer to pay.",
                    "deprecated": true
                  },
                  "value": {
                    "type": "number",
                    "format": "double",
                    "example": 1.5,
                    "description": "Required if product_id and cart are null. The customer will be asked to pay for this amount."
                  },
                  "currency": {
                    "type": "string",
                    "enum": [
                      "CAD",
                      "HKD",
                      "ISK",
                      "PHP",
                      "DKK",
                      "HUF",
                      "CZK",
                      "GBP",
                      "RON",
                      "SEK",
                      "IDR",
                      "INR",
                      "BRL",
                      "RUB",
                      "HRK",
                      "JPY",
                      "THB",
                      "CHF",
                      "EUR",
                      "MYR",
                      "BGN",
                      "TRY",
                      "CNY",
                      "NOK",
                      "NZD",
                      "ZAR",
                      "USD",
                      "MXN",
                      "SGD",
                      "AUD",
                      "ILS",
                      "KRW",
                      "PLN"
                    ],
                    "example": "EUR",
                    "description": "Required if product_id and cart are null, defines the currency of value."
                  },
                  "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 5,
                    "description": "Can be passed with either product_id null or not. The value or product's price will be multiplied by this amount."
                  },
                  "coupon_code": {
                    "type": "string",
                    "example": "CHRISTMAS",
                    "description": "Pass a Sellix coupon code to apply a discount over the invoice."
                  },
                  "confirmations": {
                    "type": "integer",
                    "example": 1,
                    "description": "Cryptocurrency confirmations required to count a transaction over the total crypto amount needed."
                  },
                  "email": {
                    "type": "string",
                    "example": "customer@gmail.com",
                    "description": "Email of the customer. Should you want to handle emails on your own, pass to this field a company email to which PDF receipts of orders will be sent for accounting and log purposes."
                  },
                  "custom_fields": {
                    "$ref": "#/components/schemas/custom_fields_object"
                  },
                  "fraud_shield": {
                    "type": "object",
                    "required": [
                      "ip",
                      "user_agent",
                      "user_language"
                    ],
                    "properties": {
                      "ip": {
                        "type": "string",
                        "example": "255.255.255.255",
                        "description": "Customer IP."
                      },
                      "user_agent": {
                        "type": "string",
                        "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0",
                        "description": "Customer user agent."
                      },
                      "user_language": {
                        "type": "string",
                        "example": "en-GB,fr-FR;q=0.5",
                        "description": "Customer user language."
                      }
                    },
                    "description": "Customer details to be used by our fraud shield in order to score potential fraud attempts."
                  },
                  "webhook": {
                    "type": "string",
                    "example": "https://dev.sellix.io/v1/webhook",
                    "description": "Webhook URL to which updates regarding this payment (invoice) will be sent."
                  },
                  "white_label": {
                    "type": "boolean",
                    "example": false,
                    "description": "Whether or not you want to handle the payments UI. If false, return_url must be specified as it is the website where we will redirect the customer once he has paid through our platform. If true, we will return a full invoice object in the response for you to handle. You can receive updates over invoices and handle subsequent logics through our webhooks."
                  },
                  "return_url": {
                    "type": "string",
                    "example": "https://sample.sellix.io/return"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/payment"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/payments/{uniqid}": {
      "delete": {
        "tags": [
          "Payments"
        ],
        "operationId": "voidPayment",
        "description": "Void a payment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "tags": [
          "Payments"
        ],
        "operationId": "completePayment",
        "description": "Flag an invoice as paid and process it, sending the purchased product to the customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "operationId": "getCustomers",
        "description": "List all the customers created on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/customers"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "operationId": "createCustomer",
        "description": "Create a customer",
        "requestBody": {
          "description": "customer JSON to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "name",
                  "surname"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "sample@gmail.com",
                    "description": "Customer email"
                  },
                  "name": {
                    "type": "string",
                    "example": "James",
                    "description": "Customer name"
                  },
                  "surname": {
                    "type": "string",
                    "example": "Smith",
                    "description": "Customer surname"
                  },
                  "phone": {
                    "type": "string",
                    "example": 3287261000,
                    "description": "Customer phone"
                  },
                  "phone_country_code": {
                    "type": "string",
                    "example": "IT",
                    "description": "Customer phone country code"
                  },
                  "country_code": {
                    "type": "string",
                    "example": "IT",
                    "description": "Customer country code"
                  },
                  "street_address": {
                    "type": "string",
                    "example": "St. Rome 404",
                    "description": "Customer street address"
                  },
                  "additional_address_info": {
                    "type": "string",
                    "example": null,
                    "description": "Customer street address additional info"
                  },
                  "city": {
                    "type": "string",
                    "example": "Rome",
                    "description": "Customer city"
                  },
                  "postal_code": {
                    "type": "string",
                    "example": 0,
                    "description": "Customer postal code"
                  },
                  "state": {
                    "type": "string",
                    "example": "Italy",
                    "description": "Customer state"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/customerCreated"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "operationId": "getCustomer",
        "description": "Get a specific customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/customer"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "operationId": "updateCustomer",
        "description": "Update a customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "customer JSON to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "sample@gmail.com",
                    "description": "Customer email"
                  },
                  "name": {
                    "type": "string",
                    "example": "James",
                    "description": "Customer name"
                  },
                  "surname": {
                    "type": "string",
                    "example": "Smith",
                    "description": "Customer surname"
                  },
                  "phone": {
                    "type": "string",
                    "example": 3287261000,
                    "description": "Customer phone"
                  },
                  "phone_country_code": {
                    "type": "string",
                    "example": "IT",
                    "description": "Customer phone country code"
                  },
                  "country_code": {
                    "type": "string",
                    "example": "IT",
                    "description": "Customer country code"
                  },
                  "street_address": {
                    "type": "string",
                    "example": "St. Rome 404",
                    "description": "Customer street address"
                  },
                  "additional_address_info": {
                    "type": "string",
                    "example": null,
                    "description": "Customer street address additional info"
                  },
                  "city": {
                    "type": "string",
                    "example": "Rome",
                    "description": "Customer city"
                  },
                  "postal_code": {
                    "type": "string",
                    "example": 0,
                    "description": "Customer postal code"
                  },
                  "state": {
                    "type": "string",
                    "example": "Italy",
                    "description": "Customer state"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "getSubscriptions",
        "description": "List all the subscriptions created on the current shop.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscriptions"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "createSubscriptionToCustomer",
        "description": "Create a subscription invoice to a customer",
        "requestBody": {
          "description": "subscription creation JSON",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "product_id",
                  "customer_id"
                ],
                "properties": {
                  "product_id": {
                    "type": "string",
                    "description": "ID of the subscription product.",
                    "example": "5eb6b2bde8a50"
                  },
                  "coupon_code": {
                    "type": "string",
                    "description": "Coupon code for this subscription.",
                    "example": null
                  },
                  "custom_fields": {
                    "$ref": "#/components/schemas/custom_fields_object"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "ID of the store customer.",
                    "example": "cst_sampleaddc898a645"
                  },
                  "gateway": {
                    "type": "string",
                    "enum": [
                      "PAYPAL",
                      "ETHEREUM",
                      "BITCOIN",
                      "BITCOIN_CASH",
                      "LITECOIN",
                      "SKRILL",
                      "STRIPE",
                      "PERFECT_MONEY",
                      "CASH_APP",
                      "LEX_HOLDINGS_GROUP",
                      "PAYDASH",
                      "MONERO",
                      "NANO",
                      "SOLANA",
                      "RIPPLE"
                    ],
                    "example": null,
                    "description": "If null, the customer will be asked automatically to choose a gateway on the Sellix hosted /payment page."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscriptionInvoiceCreated"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "getSubscription",
        "description": "Get a specific subscription.",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscription"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "deleteSubscription",
        "description": "Cancel a subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/products/licensing/hardware_id": {
      "put": {
        "tags": [
          "Licenses"
        ],
        "operationId": "updateHardwareId",
        "description": "Assign an hardware ID to a license.",
        "requestBody": {
          "description": "product licensing assign hardware ID JSON",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "product_id",
                  "key",
                  "hardware_id"
                ],
                "properties": {
                  "product_id": {
                    "type": "string",
                    "description": "Uniqid of the license product.",
                    "example": "5eb6b2bde8a50"
                  },
                  "key": {
                    "type": "string",
                    "description": "License key purchase by the customer.",
                    "example": "LICENSE-SAMPLE-00"
                  },
                  "hardware_id": {
                    "type": "string",
                    "description": "Hardware ID to be assigned to the license.",
                    "example": "098H52ST479QE053V2"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/license"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/products/licensing/check": {
      "post": {
        "tags": [
          "Licenses"
        ],
        "operationId": "checkLicense",
        "description": "Checks the validity of a license key and its hardware ID.",
        "requestBody": {
          "description": "product licensing assign hardware ID JSON",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "product_id",
                  "key"
                ],
                "properties": {
                  "product_id": {
                    "type": "string",
                    "description": "Uniqid of the license product.",
                    "example": "5eb6b2bde8a50"
                  },
                  "key": {
                    "type": "string",
                    "description": "License key purchase by the customer.",
                    "example": "LICENSE-SAMPLE-00"
                  },
                  "hardware_id": {
                    "type": "string",
                    "description": "Hardware ID to be assigned to the license. If passed, the hardware ID will be checked against the license key.",
                    "example": "098H52ST479QE053V2"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "schemas": {
      "blacklist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample29a0e39d",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "scope": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "SHARED"
            ],
            "example": "PRIVATE",
            "description": "Whether it is a PRIVATE or SHARED blacklist. SHARED blacklists are created by Sellix's Fraud Shield to be used across Business and Enterprise merchants."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this blacklist belongs."
          },
          "type": {
            "type": "string",
            "enum": [
              "EMAIL",
              "IP",
              "COUNTRY",
              "ISP",
              "ASN",
              "HOST"
            ],
            "example": "EMAIL",
            "description": "The type of data of this blacklist."
          },
          "data": {
            "type": "string",
            "example": "example@gmail.com",
            "description": "The value of the blacklist."
          },
          "note": {
            "type": "string",
            "example": "Blocking unwanted email.",
            "description": "Additional note provided on blacklist creation."
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the blacklist."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the blacklist has been edited."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the blacklist has been edited."
          }
        }
      },
      "whitelist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample29a0e39d",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this whitelist belongs."
          },
          "type": {
            "type": "string",
            "enum": [
              "EMAIL",
              "IP",
              "COUNTRY",
              "ISP",
              "ASN",
              "HOST"
            ],
            "example": "EMAIL",
            "description": "The type of data of this whitelist."
          },
          "data": {
            "type": "string",
            "example": "example@gmail.com",
            "description": "The value of the whitelist."
          },
          "note": {
            "type": "string",
            "example": "Admitting known email.",
            "description": "Additional note provided on whitelist creation."
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the whitelist."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the whitelist has been edited."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the whitelist has been edited."
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample29a0e39d",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this category belongs."
          },
          "title": {
            "type": "string",
            "example": "Software",
            "description": "Title of the category."
          },
          "unlisted": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the category is visible on the merchant storefront."
          },
          "sort_priority": {
            "type": "integer",
            "example": 1,
            "description": "Sort order of this category."
          },
          "products_bound": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/product"
            },
            "description": "Array of products. Please note that the product object contains limited fields, to get the full product object please use the Products API endpoint."
          },
          "products_count": {
            "type": "integer",
            "example": 1,
            "description": "How many products are present in the products_bound array"
          },
          "groups_bound": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group"
            },
            "description": "Array of groups."
          },
          "groups_count": {
            "type": "integer",
            "example": 1,
            "description": "How many groups are present in the groups_bound array"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the category."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the category has been edited."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the category has been edited."
          }
        }
      },
      "group": {
        "type": "object",
        "properties": {
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample29a0e39d",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "title": {
            "type": "string",
            "example": "Digital goods to download",
            "description": "Group title."
          },
          "image_attachment": {
            "type": "string",
            "description": "DEPRECATED: Unique id of the image attachment for this group.",
            "deprecated": true
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the group."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the group has been edited."
          }
        }
      },
      "coupon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample29a0e39d",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this coupon belongs."
          },
          "type": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "SUBSCRIPTION"
            ],
            "example": "PRODUCT",
            "description": "Coupon type, whether it's for a product or subscription. SUBSCRIPTION coupons are only for Sellix-own subscriptions, this field will always return PRODUCT."
          },
          "code": {
            "type": "string",
            "example": "CHRISTMAS25",
            "description": "Coupon code to be used during the checkout phase."
          },
          "use_type": {
            "type": "string",
            "enum": [
              "LIMITED",
              "ANY"
            ],
            "example": "LIMITED",
            "description": "If LIMITED, an array of products must be specified as this coupon will be used only with them."
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 25,
            "description": "Discount value for this coupon."
          },
          "currency": {
            "type": "string",
            "description": "DEPRECATED: Currency of the coupon discount value.",
            "deprecated": true
          },
          "used": {
            "type": "integer",
            "example": 15,
            "description": "How many times this coupon has been used."
          },
          "disabled_with_volume_discounts": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not this coupon is valid if a volume discount is applied."
          },
          "all_recurring_bill_invoices": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not this coupon should be applied for each product SUBSCRIPTION renewal."
          },
          "max_uses": {
            "type": "integer",
            "example": 25,
            "description": "Maximum usage for this coupon."
          },
          "products_bound": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of product uniqids. Differs from the categories API as this endpoint does not need specific details about a product. Use the products API to get details about a single product.",
            "example": [
              "sample56f391049"
            ]
          },
          "products_count": {
            "type": "integer",
            "example": 1,
            "description": "How many products are present in the products_bound array"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the category."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the category has been edited."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the category has been edited."
          }
        }
      },
      "feedback": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-a0bb9d70a9-9e852a",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "samplea0bb9d70a9",
            "description": "Unique ID of the product for which this feedback has been posted."
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample-cc39109624-03b70b",
            "description": "Unique ID of the invoice for which this feedback has been posted."
          },
          "blocked": {
            "type": "boolean",
            "example": false,
            "description": "If true, this feedback has been blocked after an appeal."
          },
          "appealed": {
            "type": "boolean",
            "example": false,
            "description": "If true, an appeal has been created for this feedback."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this feedback belongs."
          },
          "message": {
            "type": "string",
            "example": "Nice product!",
            "description": "Message left by the customer."
          },
          "reply": {
            "type": "string",
            "example": "Thank you for the feedback.",
            "description": "Reply left by the merchant."
          },
          "score": {
            "type": "integer",
            "example": 5,
            "maximum": 5,
            "minimum": 0,
            "description": "Score left by the customer, if 0 no score has been left."
          },
          "product_title": {
            "type": "string",
            "example": "Digital Good",
            "description": "Product title for which this feedback has been created"
          },
          "product_image_name": {
            "type": "string",
            "description": "DEPRECATED: Unique id of the image attachment for this product with the image extension included.",
            "deprecated": true
          },
          "product_image_storage": {
            "type": "string",
            "description": "DEPRECATED: Where the image is stored in our self-hosted CDN.",
            "deprecated": true
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "invoice": {
            "$ref": "#/components/schemas/invoice"
          },
          "product": {
            "$ref": "#/components/schemas/product"
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the product."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the product has been edited."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the product has been edited."
          }
        }
      },
      "feedbackListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-a0bb9d70a9-9e852a",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "samplea0bb9d70a9",
            "description": "Unique ID of the product for which this feedback has been posted."
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample-cc39109624-03b70b",
            "description": "Unique ID of the invoice for which this feedback has been posted."
          },
          "blocked": {
            "type": "boolean",
            "example": false,
            "description": "If true, this feedback has been blocked after an appeal."
          },
          "appealed": {
            "type": "boolean",
            "example": false,
            "description": "If true, an appeal has been created for this feedback."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this feedback belongs."
          },
          "message": {
            "type": "string",
            "example": "Nice product!",
            "description": "Message left by the customer."
          },
          "reply": {
            "type": "string",
            "example": "Thank you for the feedback.",
            "description": "Reply left by the merchant."
          },
          "score": {
            "type": "integer",
            "example": 5,
            "maximum": 5,
            "minimum": 0,
            "description": "Score left by the customer, if 0 no score has been left."
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the product."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the product has been edited."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the product has been edited."
          }
        }
      },
      "product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample29a0e39d",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this resource belongs."
          },
          "type": {
            "type": "string",
            "enum": [
              "SERIALS",
              "FILE",
              "SERVICE",
              "DYNAMIC",
              "INFO_CARD",
              "SUBSCRIPTION"
            ],
            "example": "SUBSCRIPTION",
            "description": "Product type."
          },
          "subtype": {
            "type": "string",
            "enum": [
              "SERIALS",
              "FILE",
              "SERVICE",
              "DYNAMIC"
            ],
            "example": null,
            "description": "Product subtype, can be used only with type SUBSCRIPTION."
          },
          "title": {
            "type": "string",
            "example": "Digital good to download",
            "description": "Product title."
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 5,
            "description": "Product price."
          },
          "price_display": {
            "type": "number",
            "format": "double",
            "example": 4.5,
            "description": "Product price in currency."
          },
          "description": {
            "type": "string",
            "example": "Product description",
            "description": "Product description."
          },
          "image_attachment": {
            "type": "string",
            "description": "DEPRECATED: Unique id of the image attachment for this product.",
            "deprecated": true
          },
          "file_attachment": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique id of the file attachment for this product if the product type is FILE."
          },
          "volume_discounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "PERCENTAGE",
                    "FIXED"
                  ],
                  "example": "PERCENTAGE",
                  "description": "Whether the discount value is a percentage or a fixed amount."
                },
                "value": {
                  "type": "integer",
                  "example": 5,
                  "description": "Value of a percentage or fixed discount."
                },
                "quantity": {
                  "type": "integer",
                  "example": 10,
                  "description": "How much of this product needs to be purchased in order to be eligible for this volume discount."
                }
              }
            },
            "description": "Array of volume discounts."
          },
          "recurring_interval": {
            "type": "string",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "example": "MONTH",
            "description": "At which frequency the customer is billed for product type SUBSCRIPTION."
          },
          "recurring_interval_count": {
            "type": "integer",
            "example": 1,
            "description": "How many recurring_interval before the customer is billed for product type SUBSCRIPTION."
          },
          "trial_period": {
            "type": "integer",
            "example": 0,
            "description": "Defines a trial period before billing the customer for product type SUBSCRIPTION."
          },
          "paypal_product_id": {
            "type": "string",
            "example": null,
            "description": "When a product SUBSCRIPTION is created and the gateway PAYPAL chosen, a PayPal product is automatically created on the connected account."
          },
          "paypal_plan_id": {
            "type": "string",
            "example": null,
            "description": "When a product SUBSCRIPTION is created and the gateway PAYPAL chosen, a PayPal plan is automatically created on the connected account."
          },
          "stripe_price_id": {
            "type": "string",
            "example": "price_sample2X7rAeMb7AM5APEU",
            "description": "When a product SUBSCRIPTION is created and the gateway STRIPE chosen, a Stripe price is automatically created on the connected account."
          },
          "quantity_min": {
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "description": "Minimum quantity purchasable of this product."
          },
          "quantity_max": {
            "type": "integer",
            "minimum": -1,
            "example": -1,
            "description": "Maximum quantity purchasable of this product."
          },
          "quantity_warning": {
            "type": "integer",
            "example": 0,
            "description": "At which product quantity should we send a webhook and email warning the merchant."
          },
          "gateways": {
            "$ref": "#/components/schemas/gateways"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_array"
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 3,
            "description": "Minimum number of confirmations for a crypto payment to be accepted."
          },
          "max_risk_level": {
            "type": "integer",
            "example": 85,
            "maximum": 100,
            "minimum": 0,
            "description": "For PAYPAL and STRIPE, maximum risk level to accept payments in order to block fraud attempts."
          },
          "block_vpn_proxies": {
            "type": "boolean",
            "example": true,
            "description": "Block VPN and Proxy purchases if the gateway is PAYPAL or STRIPE."
          },
          "delivery_text": {
            "type": "string",
            "example": "Thank you for purchasing this subscription!",
            "description": "Text sent to the customer after the purchase."
          },
          "service_text": {
            "type": "string",
            "example": "In order to get you services, please contact us at..",
            "description": "Text sent to the customer if product type is SERVICE."
          },
          "stock_delimiter": {
            "type": "string",
            "example": ",",
            "description": "How to delimit the stock if product type is SERIALS, for example with stock_delimiter \",\" and serials value first,second; the stock would have two different serials \"first\" and \"second\"."
          },
          "stock": {
            "type": "integer",
            "example": -1,
            "description": "Stock of the current product, can be -1 for unlimited stock."
          },
          "dynamic_webhook": {
            "type": "string",
            "example": null,
            "description": "Product webhook for prouct type DYNAMIC. We will send here a request for a COMPLETED invoice in order to get the product for the customer."
          },
          "sort_priority": {
            "type": "integer",
            "example": 1,
            "description": "Sort order of this product."
          },
          "unlisted": {
            "type": "boolean",
            "example": false,
            "description": "If unlisted is true, the product is not shown in the storefront but can be bought through a direct link."
          },
          "on_hold": {
            "type": "boolean",
            "example": false,
            "description": "If on_hold is true, the product cannot be bought but is shown in the storefront."
          },
          "terms_of_service": {
            "type": "string",
            "example": null,
            "description": "Text containing the product's terms of service."
          },
          "warranty": {
            "type": "integer",
            "example": 86400,
            "description": "Time, in seconds, of how much the warranty for this product lasts."
          },
          "warranty_text": {
            "type": "string",
            "example": "This warranty covers..",
            "description": "Clear explanation of what the warranty covers."
          },
          "private": {
            "type": "boolean",
            "example": false,
            "description": "If private is true, the product is hidden on the storefront and cannot be bought with a direct link."
          },
          "name": {
            "type": "string",
            "example": "Sellix",
            "description": "Name of the merchant who owns this product."
          },
          "image_name": {
            "type": "string",
            "description": "DEPRECATED: Unique id of the image attachment for this product with the image extension included.",
            "deprecated": true
          },
          "image_storage": {
            "type": "string",
            "description": "DEPRECATED: Where the image is stored in our self-hosted CDN.",
            "deprecated": true
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "serials": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [],
            "description": "Array of the serials in stock for this product."
          },
          "webhooks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [],
            "description": "Array of the webhook URLs for this product."
          },
          "feedback": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 10,
                "description": "Count of all the feedback."
              },
              "positive": {
                "type": "integer",
                "example": 8,
                "description": "Count of positive feedback."
              },
              "neutral": {
                "type": "integer",
                "example": 1,
                "description": "Count of neutral feedback."
              },
              "negative": {
                "type": "integer",
                "example": 0,
                "description": "Count of negative feedback."
              }
            }
          },
          "theme": {
            "type": "string",
            "enum": [
              "dark",
              "light"
            ],
            "example": "light",
            "description": "Whether this product uses the dark or light theme."
          },
          "dark_mode": {
            "type": "integer",
            "enum": [
              1,
              0
            ],
            "example": 0,
            "description": "(duplicate, present only in some API requests) Whether this product uses the dark or light theme."
          },
          "average_score": {
            "type": "number",
            "format": "double",
            "example": 4.5,
            "description": "Average feedback score for this product."
          },
          "sold_count": {
            "type": "integer",
            "example": 5,
            "description": "How many times this product has been sold."
          },
          "lex_payment_methods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "DEPRECATED: Available payment methods for gateway LEX_HOLDINGS_GROUP.",
            "deprecated": true
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the product."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the product has been edited."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the product has been edited."
          }
        }
      },
      "customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "cst_8761b2g7atm91892",
            "description": "Customer ID"
          },
          "email": {
            "type": "string",
            "example": "sample@gmail.com",
            "description": "Customer email"
          },
          "name": {
            "type": "string",
            "example": "James",
            "description": "Customer name"
          },
          "surname": {
            "type": "string",
            "example": "Smith",
            "description": "Customer surname"
          },
          "phone": {
            "type": "string",
            "example": 3287261000,
            "description": "Customer phone"
          },
          "phone_country_code": {
            "type": "string",
            "example": "IT",
            "description": "Customer phone country code"
          },
          "country_code": {
            "type": "string",
            "example": "IT",
            "description": "Customer country code"
          },
          "street_address": {
            "type": "string",
            "example": "St. Rome 404",
            "description": "Customer street address"
          },
          "additional_address_info": {
            "type": "string",
            "example": null,
            "description": "Customer street address additional info"
          },
          "city": {
            "type": "string",
            "example": "Rome",
            "description": "Customer city"
          },
          "postal_code": {
            "type": "string",
            "example": 0,
            "description": "Customer postal code"
          },
          "state": {
            "type": "string",
            "example": "Italy",
            "description": "Customer state"
          }
        }
      },
      "subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the subscription.",
            "example": "rec_sample-3afde4b6e1-82833e"
          },
          "shop_id": {
            "type": "integer",
            "description": "ID of the store for which this subscription has been created.",
            "example": 124
          },
          "product_id": {
            "type": "string",
            "description": "ID of the product subscription.",
            "example": "samplede6277597"
          },
          "status": {
            "type": "string",
            "description": "Subscription status.",
            "enum": [
              "PENDING",
              "CANCELED",
              "TRIALING",
              "ACTIVE"
            ],
            "example": "CANCELED"
          },
          "gateway": {
            "type": "string",
            "enum": [
              "PAYPAL",
              "ETHEREUM",
              "BITCOIN",
              "BITCOIN_CASH",
              "LITECOIN",
              "SKRILL",
              "STRIPE",
              "PERFECT_MONEY",
              "CASH_APP",
              "LEX_HOLDINGS_GROUP",
              "PAYDASH",
              "MONERO",
              "NANO",
              "SOLANA",
              "RIPPLE"
            ],
            "example": "STRIPE",
            "description": "Gateway chosen for this subscription. A new invoice monthly will be created using this gayeway."
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_object"
          },
          "customer_id": {
            "type": "string",
            "description": "ID of the store's customer.",
            "example": "cst_sample6addc898a645"
          },
          "stripe_customer_id": {
            "type": "string",
            "description": "ID of the customer created on STRIPE.",
            "example": "cus_samplegIE0YKwapE6"
          },
          "stripe_account": {
            "type": "string",
            "description": "ID of the Stripe connected account.",
            "example": "acct_sampleuMKb2X7rAeMb"
          },
          "stripe_subscription_id": {
            "type": "string",
            "description": "ID of the Stripe subscription.",
            "example": "sub_samplexpKb2X7rAeMbKdJc78AP"
          },
          "coupon_id": {
            "type": "string",
            "description": "If a coupon has been applied, its ID.",
            "example": null
          },
          "current_period_end": {
            "type": "integer",
            "format": "timestamp",
            "description": "When the current billing period will end.",
            "example": 1641313649
          },
          "upcoming_email_1_week_sent": {
            "type": "boolean",
            "description": "Whether or not the email for an upcoming renewal has been sent.",
            "example": false
          },
          "trial_period_ending_email_sent": {
            "type": "boolean",
            "description": "Whether or not the email for the trial period expiring has been sent.",
            "example": false
          },
          "renewal_invoice_created": {
            "type": "boolean",
            "description": "If true, the renewal invoice has already been created.",
            "example": false
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was created.",
            "example": 1641314317
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was last updated.",
            "example": 1641315120
          },
          "canceled_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was canceled.",
            "example": null
          },
          "product_title": {
            "type": "string",
            "description": "Digital Software",
            "example": "The title of the product for this subscription."
          },
          "customer_name": {
            "type": "string",
            "description": "Customer name.",
            "example": "James"
          },
          "customer_surname": {
            "type": "string",
            "description": "Customer surname.",
            "example": "Smith"
          },
          "customer_phone": {
            "type": "string",
            "description": "Customer phone.",
            "example": null
          },
          "customer_phone_country_code": {
            "type": "string",
            "description": "Customer phone country code.",
            "example": null
          },
          "customer_country_code": {
            "type": "string",
            "description": "Customer country code.",
            "example": null
          },
          "customer_street_address": {
            "type": "string",
            "description": "Customer street address.",
            "example": null
          },
          "customer_additional_address_info": {
            "type": "string",
            "description": "Customer street address additional info.",
            "example": null
          },
          "customer_city": {
            "type": "string",
            "description": "Customer city.",
            "example": null
          },
          "customer_postal_code": {
            "type": "string",
            "description": "Customer postal code.",
            "example": null
          },
          "customer_state": {
            "type": "string",
            "description": "Customer state.",
            "example": null
          },
          "customer_email": {
            "type": "string",
            "description": "Customer email.",
            "example": "sample@gmail.com"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/invoiceListing"
            }
          }
        }
      },
      "subscriptionListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the subscription.",
            "example": "rec_sample-3afde4b6e1-82833e"
          },
          "shop_id": {
            "type": "integer",
            "description": "ID of the store for which this subscription has been created.",
            "example": 124
          },
          "product_id": {
            "type": "string",
            "description": "ID of the product subscription.",
            "example": "samplede6277597"
          },
          "status": {
            "type": "string",
            "description": "Subscription status.",
            "enum": [
              "PENDING",
              "CANCELED",
              "TRIALING",
              "ACTIVE"
            ],
            "example": "CANCELED"
          },
          "gateway": {
            "type": "string",
            "enum": [
              "PAYPAL",
              "ETHEREUM",
              "BITCOIN",
              "BITCOIN_CASH",
              "LITECOIN",
              "SKRILL",
              "STRIPE",
              "PERFECT_MONEY",
              "CASH_APP",
              "LEX_HOLDINGS_GROUP",
              "PAYDASH",
              "MONERO",
              "NANO",
              "SOLANA",
              "RIPPLE"
            ],
            "example": "STRIPE",
            "description": "Gateway chosen for this subscription. A new invoice monthly will be created using this gayeway."
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_object"
          },
          "customer_id": {
            "type": "string",
            "description": "ID of the store's customer.",
            "example": "cst_sample6addc898a645"
          },
          "stripe_customer_id": {
            "type": "string",
            "description": "ID of the customer created on STRIPE.",
            "example": "cus_samplegIE0YKwapE6"
          },
          "stripe_account": {
            "type": "string",
            "description": "ID of the Stripe connected account.",
            "example": "acct_sampleuMKb2X7rAeMb"
          },
          "stripe_subscription_id": {
            "type": "string",
            "description": "ID of the Stripe subscription.",
            "example": "sub_samplexpKb2X7rAeMbKdJc78AP"
          },
          "coupon_id": {
            "type": "string",
            "description": "If a coupon has been applied, its ID.",
            "example": null
          },
          "current_period_end": {
            "type": "integer",
            "format": "timestamp",
            "description": "When the current billing period will end.",
            "example": 1641313649
          },
          "upcoming_email_1_week_sent": {
            "type": "boolean",
            "description": "Whether or not the email for an upcoming renewal has been sent.",
            "example": false
          },
          "trial_period_ending_email_sent": {
            "type": "boolean",
            "description": "Whether or not the email for the trial period expiring has been sent.",
            "example": false
          },
          "renewal_invoice_created": {
            "type": "boolean",
            "description": "If true, the renewal invoice has already been created.",
            "example": false
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was created.",
            "example": 1641314317
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was last updated.",
            "example": 1641315120
          },
          "canceled_at": {
            "type": "integer",
            "format": "timestamp",
            "description": "When this subscription was canceled.",
            "example": null
          },
          "product_title": {
            "type": "string",
            "description": "Digital Software",
            "example": "The title of the product for this subscription."
          },
          "customer_name": {
            "type": "string",
            "description": "Customer name.",
            "example": "James"
          },
          "customer_surname": {
            "type": "string",
            "description": "Customer surname.",
            "example": "Smith"
          },
          "customer_phone": {
            "type": "string",
            "description": "Customer phone.",
            "example": null
          },
          "customer_phone_country_code": {
            "type": "string",
            "description": "Customer phone country code.",
            "example": null
          },
          "customer_country_code": {
            "type": "string",
            "description": "Customer country code.",
            "example": null
          },
          "customer_street_address": {
            "type": "string",
            "description": "Customer street address.",
            "example": null
          },
          "customer_additional_address_info": {
            "type": "string",
            "description": "Customer street address additional info.",
            "example": null
          },
          "customer_city": {
            "type": "string",
            "description": "Customer city.",
            "example": null
          },
          "customer_postal_code": {
            "type": "string",
            "description": "Customer postal code.",
            "example": null
          },
          "customer_state": {
            "type": "string",
            "description": "Customer state.",
            "example": null
          },
          "customer_email": {
            "type": "string",
            "description": "Customer email.",
            "example": "sample@gmail.com"
          }
        }
      },
      "invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource."
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-3ddfc9dc3d-ab2e36",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "recurring_billing_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the recurring bill."
          },
          "total": {
            "type": "number",
            "format": "double",
            "example": 2.5,
            "description": "Invoice total, unit_price*quantity where quantity is applicable."
          },
          "total_display": {
            "type": "number",
            "format": "double",
            "example": 2,
            "description": "Invoice total in the currency chosen."
          },
          "exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 1.12,
            "description": "Exchange rate between currency chosen and USD."
          },
          "crypto_exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 176.38,
            "description": "Exchange rate between the cryptocurrency chosen (if any) and USD."
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this invoice belongs."
          },
          "shop_image_name": {
            "type": "string",
            "description": "DEPRECATED: Unique id of the image attachment for this merchant with the image extension included.",
            "deprecated": true
          },
          "shop_image_storage": {
            "type": "string",
            "description": "DEPRECATED: Where the image is stored in our self-hosted CDN.",
            "deprecated": true
          },
          "cloudflare_image_id": {
            "$ref": "#/components/schemas/cloudflare_image_id"
          },
          "name": {
            "type": "string",
            "example": "Sellix",
            "description": "Name of the merchant."
          },
          "type": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "SUBSCRIPTION",
              "PUBLIC_REST_API",
              "MONTHLY_BILL",
              "SHOPPING_CART",
              "PRODUCT_SUBSCRIPTION"
            ],
            "example": "PRODUCT",
            "description": "Invoice type. For subscriptions, the invoice type is PRODUCT_SUBSCRIPTION as SUBSCRIPTION is reserved for Sellix-own plans."
          },
          "customer_email": {
            "type": "string",
            "example": "customer@gmail.com",
            "description": "Email of the customer."
          },
          "paypal_email_delivery": {
            "type": "boolean",
            "example": false,
            "description": "If true and gateway is PAYPAL, the product will be shipped to the PayPal email on record instead of the customer email."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample2bde8a50",
            "description": "Unique ID of the product linked to this invoice, if any."
          },
          "product_title": {
            "type": "string",
            "example": "Digital Good",
            "description": "Product title."
          },
          "product_type": {
            "type": "string",
            "enum": [
              "SERIALS",
              "FILE",
              "SERVICE",
              "DYNAMIC",
              "INFO_CARD",
              "SUBSCRIPTION"
            ],
            "example": "SERIALS",
            "description": "Product type."
          },
          "subtype": {
            "type": "string",
            "enum": [
              "SERIALS",
              "FILE",
              "SERVICE",
              "DYNAMIC"
            ],
            "example": null,
            "description": "Product subtype, set only with product_type SUBSCRIPTION."
          },
          "subscription_id": {
            "type": "integer",
            "example": null,
            "description": "Field reserved for Sellix-own plans. Unique ID of the subscription purchased."
          },
          "subscription_time": {
            "type": "integer",
            "example": null,
            "description": "Field reserved for Sellix-own plans. Time, in seconds, of the subscription purchased."
          },
          "gateway": {
            "type": "string",
            "enum": [
              "PAYPAL",
              "ETHEREUM",
              "BITCOIN",
              "BITCOIN_CASH",
              "LITECOIN",
              "SKRILL",
              "STRIPE",
              "PERFECT_MONEY",
              "CASH_APP",
              "LEX_HOLDINGS_GROUP",
              "PAYDASH",
              "MONERO",
              "NANO",
              "SOLANA",
              "RIPPLE"
            ],
            "example": "SOLANA",
            "description": "Gateway chosen for this invoice. If null, the customer will be asked for a gateway in the Sellix hosted invoice page."
          },
          "paypal_apm": {
            "type": "string",
            "example": null,
            "description": "PayPal Alternative Payment Method name, such as iDEAL, used if gateway is PAYPAL."
          },
          "paypal_email": {
            "type": "string",
            "description": "DEPRECATED: Merchant PayPal email.",
            "deprecated": true
          },
          "paypal_order_id": {
            "type": "string",
            "example": null,
            "description": "This field contains the PayPal order ID."
          },
          "paypal_fee": {
            "type": "string",
            "example": null,
            "description": "This field is updated after the invoice is completed with the fee taken by PayPal over the invoice total."
          },
          "paypal_payer_email": {
            "type": "string",
            "example": null,
            "description": "This field is updated after the invoice is completed with the PayPal's email used for the purchase."
          },
          "paypal_subscription_id": {
            "type": "integer",
            "example": null,
            "description": "ID of the paypal subscription."
          },
          "paypal_subscription_link": {
            "type": "integer",
            "example": null,
            "description": "Link for the merchant to purchase the subscription from."
          },
          "lex_order_id": {
            "type": "string",
            "description": "DEPRECATED: Unique ID of the LEX_HOLDINGS_GROUP order linked to this invoice.",
            "deprecated": true
          },
          "lex_payment_method": {
            "type": "string",
            "description": "DEPRECATED: Gateway used over LEX_HOLDINGS_GROUP.",
            "deprecated": true
          },
          "paydash_paymentID": {
            "type": "string",
            "description": "DEPRECATED: Unique ID of the PAYDASH order linked to this invoice.",
            "deprecated": true
          },
          "stripe_client_secret": {
            "type": "string",
            "example": null,
            "description": "Client secret used to create the STRIPE paymentIntent."
          },
          "stripe_price_id": {
            "type": "string",
            "example": null,
            "description": "If the invoice type is PRODUCT_SUBSCRIPTION or SUBSCRIPTION, refers to the STRIPE price ID."
          },
          "skrill_email": {
            "type": "string",
            "example": null,
            "description": "Merchant Skrill email."
          },
          "skrill_sid": {
            "type": "string",
            "example": null,
            "description": "Skrill unique ID linked to the invoice."
          },
          "skrill_link": {
            "type": "string",
            "example": null,
            "description": "Skrill link to redirect the customer to."
          },
          "perfectmoney_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "PerfectMoney payment ID linked to the invoice."
          },
          "crypto_address": {
            "type": "string",
            "example": "3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B",
            "description": "Cryptocurrency address linked to this invoice."
          },
          "crypto_amount": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount converted based on crypto_exchange_rate."
          },
          "crypto_received": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount received, paid by the customer."
          },
          "crypto_uri": {
            "type": "string",
            "example": "solana:3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B?amount=0.014174",
            "description": "URI used to create the QRCODE."
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 1,
            "description": "Crypto confirmations needed to process the invoice."
          },
          "crypto_scheduled_payout": {
            "type": "boolean",
            "example": false,
            "description": "If true, a scheduled payout for this invoice's cryptocurrency address has been sent."
          },
          "crypto_payout": {
            "type": "boolean",
            "example": true,
            "description": "If true, an instant payout for this invoice's cryptocurrency address has been sent."
          },
          "fee_billed": {
            "type": "boolean",
            "example": true,
            "description": "If true, the Sellix fee_percentage has already been collected."
          },
          "bill_info": {
            "type": "object",
            "example": null,
            "description": "If invoice type is MONTHLY_BILL, contains a breakdown of the fees that need to be collected."
          },
          "cashapp_qrcode": {
            "type": "string",
            "example": null,
            "description": "Full CashApp QRCODE string."
          },
          "cashapp_cashtag": {
            "type": "string",
            "example": null,
            "description": "CashApp cashtag used to create the QRCODE."
          },
          "cashapp_note": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique note for the customer to leave in the CashApp payment."
          },
          "country": {
            "type": "string",
            "example": "IT",
            "description": "Customer country."
          },
          "location": {
            "type": "string",
            "example": "Bologna, Emilia-Romagna (Europe/Rome)",
            "description": "Customer location."
          },
          "ip": {
            "type": "string",
            "example": "255.11.12.255",
            "description": "Customer IP."
          },
          "is_vpn_or_proxy": {
            "type": "boolean",
            "example": false,
            "description": "If true, a VPN or Proxy has been detected."
          },
          "user_agent": {
            "type": "string",
            "example": "PostmanRuntime/7.26.8",
            "description": "Customer User Agent."
          },
          "quantity": {
            "type": "integer",
            "example": 5,
            "description": "Qauntity of product purchased."
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the coupon, if used, for the discount."
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_object"
          },
          "developer_invoice": {
            "type": "boolean",
            "example": false,
            "description": "If true, this invoice has been created through the Developers API."
          },
          "developer_title": {
            "type": "string",
            "example": null,
            "description": "If a product_id is not passed through the Developers API, a title must be specified."
          },
          "developer_webhook": {
            "type": "string",
            "example": null,
            "description": "Additional webhook URL to which updates regarding this invoice will be sent."
          },
          "developer_return_url": {
            "type": "string",
            "example": null,
            "description": "If present, the customer will be redirected to this URL after the invoice has been paid."
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "VOIDED",
              "WAITING_FOR_CONFIRMATIONS",
              "PARTIAL",
              "CUSTOMER_DISPUTE_ONGOING",
              "REVERSED",
              "REFUNDED",
              "WAITING_SHOP_ACTION",
              "PROCESSING"
            ],
            "example": "COMPLETED",
            "description": "Status of the invoice."
          },
          "status_details": {
            "type": "string",
            "enum": [
              "CART_PARTIAL_OUT_OF_STOCK"
            ],
            "example": null,
            "description": "If CART_PARTIAL_OUT_OF_STOCK, the invoice has been completed but some products in the cart were out of stock."
          },
          "void_details": {
            "type": "string",
            "enum": [
              "PRODUCT_SOLD_OUT",
              "CART_PRODUCTS_SOLD_OUT"
            ],
            "example": null,
            "description": "If the invoice is VOIDED and the product (or all the products in the cart) were out of stock, this additional status is set."
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 0,
            "description": "If a coupon or volume_discount is used, the discount value presents the total amount of discount over the total cost of the invoice."
          },
          "fee_percentage": {
            "type": "integer",
            "example": 5,
            "description": "What cut does Sellix take out of the total. To learn more about Sellix fees please refer to https://sellix.io/fees."
          },
          "ip_info": {
            "$ref": "#/components/schemas/ip_info"
          },
          "serials": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "activation-key-#1",
              "activation-key-#2",
              "activation-key-#3"
            ],
            "description": "If product type is SERIALS, provide the serials linked to this invoice."
          },
          "file": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 0,
                "description": "ID of the resource."
              },
              "uniqid": {
                "type": "string",
                "format": "uuid",
                "example": "sampled79fe5041d379dde2abd180e8cd748bf336d724aa2fc13441646d",
                "description": "Unique hash of the file."
              },
              "cloudflare_image_id": {
                "$ref": "#/components/schemas/cloudflare_image_id"
              },
              "storage": {
                "type": "string",
                "description": "DEPRECATED: Where the image is stored in our self-hosted CDN.",
                "deprecated": true
              },
              "name": {
                "type": "string",
                "example": "sampled79fe5041d379dde2abd180e8cd748bf336d724aa2fc13441646d.jpg",
                "description": "Unique hash of the file containing the file extension."
              },
              "original_name": {
                "type": "string",
                "example": "Photo of a pineapple.",
                "description": "Original name of the uploaded file."
              },
              "extension": {
                "type": "string",
                "example": "jpg",
                "description": "Extension of the uploaded file."
              },
              "shop_id": {
                "type": "integer",
                "example": 0,
                "description": "The shop ID to which this attachment belongs."
              },
              "size": {
                "type": "integer",
                "example": 19391,
                "description": "Size in bytes of the attachment."
              },
              "created_at": {
                "type": "integer",
                "example": 1640777744,
                "description": "Creation date of the crypto payout transaction."
              }
            }
          },
          "service_text": {
            "type": "string",
            "example": null,
            "description": "If the product type is SERVICE, this field contains additional details on the type of service provided by the merchant."
          },
          "dynamic_response": {
            "type": "string",
            "example": null,
            "description": "If the product type is DYNAMIC, this field contains the response from the webhook sent to get the product."
          },
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webhook"
            },
            "example": [
              {
                "uniqid": "sample079ee22",
                "url": "https://dev.sellix.io/v1/webhook",
                "event": "order:paid",
                "retries": 1,
                "response_code": 200,
                "created_at": 1640777735,
                "payload": "{\"sample\":\"sellix\"}",
                "response": "webhook response"
              }
            ],
            "description": "Webhook responses for this invoice."
          },
          "crypto_payout_transaction": {
            "type": "object",
            "properties": {
              "to_address": {
                "type": "string",
                "example": "EqsYv2S6pFXaMBrZ9uZe4F6g32HTgvhPuucRHYpGURx1",
                "description": "Crypto payout merchant address."
              },
              "from_address": {
                "type": "string",
                "example": "3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B",
                "description": "Crypto payout invoice address."
              },
              "crypto_amount": {
                "type": "number",
                "format": "double",
                "example": 0.0134553,
                "description": "Crypto payout amount."
              },
              "hash": {
                "type": "string",
                "example": "4tE8KM2qwzxnMdjJxp419mPRViE9Nv3FvhqBphZS7i2ripj6aCwCosRYfACeCCm8kks7nmHtvoV1uDwvNejJhB2P",
                "description": "Crypto payout transaction hash."
              },
              "created_at": {
                "type": "integer",
                "example": 1640777744,
                "description": "Creation date of the crypto payout transaction."
              }
            }
          },
          "paypal_dispute": {
            "$ref": "#/components/schemas/paypal_dispute"
          },
          "status_history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/invoice_status"
            },
            "example": [
              {
                "id": 10726392,
                "invoice_id": "sample-3ddfc9dc3d-ab2e36",
                "status": "PENDING",
                "details": "The invoice has been created and we are now waiting to receive a payment.",
                "created_at": 1640777609
              },
              {
                "id": 10726409,
                "invoice_id": "sample-3ddfc9dc3d-ab2e36",
                "status": "COMPLETED",
                "details": "The invoice has been flagged as completed and the product has been shipped.",
                "created_at": 1640777796
              }
            ],
            "description": "Additional details on the invoice status change."
          },
          "crypto_transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/crypto_transaction"
            },
            "example": [
              {
                "crypto_amount": 0.014174,
                "hash": "234dB62Q3X9nyqussRSHW5x9rXe7NzyS3hLcwSTtzd9WLWfrHFUtX4KS6DAMyyHnvRgUNiqUvZdw2T9XWJqa8sPW",
                "confirmations": 1,
                "created_at": 1640777734,
                "updated_at": 1640777734
              }
            ],
            "description": "Crypto transactions received to fulfill this invoice."
          },
          "gateways_available": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PAYPAL",
              "STRIPE",
              "MONERO"
            ],
            "description": "gateways available for the update invoice Developers API."
          },
          "shop_paypal_credit_card": {
            "type": "boolean",
            "example": true,
            "description": "If true, the merchant has enabled purchase with Credit Card through PayPal."
          },
          "shop_force_paypal_email_delivery": {
            "type": "boolean",
            "example": true,
            "description": "If true, the merchant has enabled invoice shipment to the PayPal customer email."
          },
          "product": {
            "$ref": "#/components/schemas/product"
          },
          "day_value": {
            "type": "integer",
            "description": "DEPRECATED: Day value, number.",
            "deprecated": true
          },
          "day": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the day name.",
            "deprecated": true
          },
          "month": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the month name.",
            "deprecated": true
          },
          "year": {
            "type": "integer",
            "description": "DEPRECATED: Year number.",
            "deprecated": true
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the blacklist."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the blacklist has been edited."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the blacklist has been edited."
          }
        }
      },
      "invoiceListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource."
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-3ddfc9dc3d-ab2e36",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "total": {
            "type": "number",
            "format": "double",
            "example": 2.5,
            "description": "Invoice total, unit_price*quantity where quantity is applicable."
          },
          "total_display": {
            "type": "number",
            "format": "double",
            "example": 2,
            "description": "Invoice total in the currency chosen."
          },
          "exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 1.12,
            "description": "Exchange rate between currency chosen and USD."
          },
          "crypto_exchange_rate": {
            "type": "number",
            "format": "double",
            "example": 176.38,
            "description": "Exchange rate between the cryptocurrency chosen (if any) and USD."
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this invoice belongs."
          },
          "name": {
            "type": "string",
            "example": "Sellix",
            "description": "Name of the merchant."
          },
          "type": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "SUBSCRIPTION",
              "PUBLIC_REST_API",
              "MONTHLY_BILL",
              "SHOPPING_CART",
              "PRODUCT_SUBSCRIPTION"
            ],
            "example": "PRODUCT",
            "description": "Invoice type. For subscriptions, the invoice type is PRODUCT_SUBSCRIPTION as SUBSCRIPTION is reserved for Sellix-own plans."
          },
          "customer_email": {
            "type": "string",
            "example": "customer@gmail.com",
            "description": "Email of the customer."
          },
          "paypal_email_delivery": {
            "type": "boolean",
            "example": false,
            "description": "If true and gateway is PAYPAL, the product will be shipped to the PayPal email on record instead of the customer email."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample2bde8a50",
            "description": "Unique ID of the product linked to this invoice, if any."
          },
          "product_title": {
            "type": "string",
            "example": "Digital Good",
            "description": "Product title."
          },
          "product_type": {
            "type": "string",
            "enum": [
              "SERIALS",
              "FILE",
              "SERVICE",
              "DYNAMIC",
              "INFO_CARD",
              "SUBSCRIPTION"
            ],
            "example": "SERIALS",
            "description": "Product type."
          },
          "subtype": {
            "type": "string",
            "enum": [
              "SERIALS",
              "FILE",
              "SERVICE",
              "DYNAMIC"
            ],
            "example": null,
            "description": "Product subtype, set only with product_type SUBSCRIPTION."
          },
          "gateway": {
            "type": "string",
            "enum": [
              "PAYPAL",
              "ETHEREUM",
              "BITCOIN",
              "BITCOIN_CASH",
              "LITECOIN",
              "SKRILL",
              "STRIPE",
              "PERFECT_MONEY",
              "CASH_APP",
              "LEX_HOLDINGS_GROUP",
              "PAYDASH",
              "MONERO",
              "NANO",
              "SOLANA",
              "RIPPLE"
            ],
            "example": "SOLANA",
            "description": "Gateway chosen for this invoice. If null, the customer will be asked for a gateway in the Sellix hosted invoice page."
          },
          "paypal_email": {
            "type": "string",
            "description": "DEPRECATED: Merchant PayPal email.",
            "deprecated": true
          },
          "paypal_order_id": {
            "type": "string",
            "example": null,
            "description": "This field contains the PayPal order ID."
          },
          "paypal_fee": {
            "type": "string",
            "example": null,
            "description": "This field is updated after the invoice is completed with the fee taken by PayPal over the invoice total."
          },
          "paypal_payer_email": {
            "type": "string",
            "example": null,
            "description": "This field is updated after the invoice is completed with the PayPal's email used for the purchase."
          },
          "skrill_email": {
            "type": "string",
            "example": null,
            "description": "Merchant Skrill email."
          },
          "skrill_sid": {
            "type": "string",
            "example": null,
            "description": "Skrill unique ID linked to the invoice."
          },
          "skrill_link": {
            "type": "string",
            "example": null,
            "description": "Skrill link to redirect the customer to."
          },
          "perfectmoney_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "PerfectMoney payment ID linked to the invoice."
          },
          "crypto_address": {
            "type": "string",
            "example": "3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B",
            "description": "Cryptocurrency address linked to this invoice."
          },
          "crypto_amount": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount converted based on crypto_exchange_rate."
          },
          "crypto_received": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Cryptocurrency amount received, paid by the customer."
          },
          "crypto_uri": {
            "type": "string",
            "example": "solana:3RUx8gs74R5KdXrs8wU6Z2xQkS8jmGVCnTVTRpwSoE3B?amount=0.014174",
            "description": "URI used to create the QRCODE."
          },
          "crypto_confirmations_needed": {
            "type": "integer",
            "example": 1,
            "description": "Crypto confirmations needed to process the invoice."
          },
          "purchase_info": {
            "type": "object",
            "example": {
              "sample98ia7": {
                "delivery_text": "",
                "product": {
                  "...": null
                },
                "product_feedback": [],
                "service_text": "...",
                "serials": [],
                "dynamic_response": "",
                "file_attachment": {
                  "...": null
                },
                "status": "PROCESSED",
                "unit_price": 50,
                "unit_price_display": 50,
                "unit_quantity": 1
              }
            },
            "description": "If invoice type is SHOPPING_CART, object with product Unique IDs as keys which contain the product info purchased by the customer as well as the full product object. For example, if one product is SERIALS and one is SERVICE purchase_info will contain one key-value object with the details on the SERIALS purchased as well as info on its product and another similar key-value object with more information on the SERVICE purchased."
          },
          "crypto_scheduled_payout_transaction": {
            "type": "object",
            "example": null,
            "properties": {
              "amount": {
                "type": "number",
                "format": "double",
                "example": 0.0021688598,
                "description": "Cryptocurrency amount sent in the payout transaction."
              },
              "transaction_output": {
                "type": "number",
                "format": "double",
                "example": 0.0020222568,
                "description": "Total output of the transaction, equals to amount-transaction_fee-service_fee."
              },
              "shop_cut": {
                "type": "number",
                "format": "double",
                "example": 0.0020222568,
                "description": "Equal to transaction_output."
              },
              "transaction_fee": {
                "type": "number",
                "format": "double",
                "example": 0.00003816,
                "description": "Crypto transaction fee."
              },
              "service_fee": {
                "type": "number",
                "format": "double",
                "example": 0.000108443,
                "description": "Service fee, Sellix cut."
              },
              "tx": {
                "type": "string",
                "example": "ef1cc930f7374d45019196a635f3b4d1c12cbeb106e8b3dbeadbe30ac034beae",
                "description": "Crypto transaction hash."
              },
              "created_at": {
                "type": "integer",
                "example": 1640741003,
                "description": "When the transaction was broadcasted."
              }
            },
            "description": "If the payout for this invoice is SCHEDULED and not INSTANT and a cryptocurrency gateway is used, once the payout has been sent this field will contain additional info on it."
          },
          "products": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": null,
            "description": "If invoice type is SHOPPING_CART, contains an array of product objects for each product added to the cart."
          },
          "cashapp_partial_amount_received": {
            "type": "string",
            "example": null,
            "description": "If gateway is CASH_APP and invoice status PARTIAL, the amount received with Cash App that does not cover the total."
          },
          "paypal_client_id": {
            "type": "string",
            "example": null,
            "description": "If gateway is PAYPAL, contains the PayPal client ID to be used with the PayPal checkout SDK."
          },
          "stripe_user_id": {
            "type": "string",
            "example": null,
            "description": "If gateway is STRIPE, contains the stripe account id of the merchant."
          },
          "stripe_publishable_key": {
            "type": "string",
            "example": null,
            "description": "If gateway is STRIPE, contains stripe_publishable_key to process the PaymentIntent."
          },
          "cashapp_cashtag": {
            "type": "string",
            "example": null,
            "description": "CashApp cashtag used to create the QRCODE."
          },
          "cashapp_note": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique note for the customer to leave in the CashApp payment."
          },
          "country": {
            "type": "string",
            "example": "IT",
            "description": "Customer country."
          },
          "location": {
            "type": "string",
            "example": "Bologna, Emilia-Romagna (Europe/Rome)",
            "description": "Customer location."
          },
          "ip": {
            "type": "string",
            "example": "255.11.12.255",
            "description": "Customer IP."
          },
          "is_vpn_or_proxy": {
            "type": "boolean",
            "example": false,
            "description": "If true, a VPN or Proxy has been detected."
          },
          "user_agent": {
            "type": "string",
            "example": "PostmanRuntime/7.26.8",
            "description": "Customer User Agent."
          },
          "quantity": {
            "type": "integer",
            "example": 5,
            "description": "Qauntity of product purchased."
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the coupon, if used, for the discount."
          },
          "coupon_code": {
            "type": "string",
            "example": null,
            "description": "If coupon_id is specified, coupon_code contains the code used during the checkout."
          },
          "custom_fields": {
            "$ref": "#/components/schemas/custom_fields_object"
          },
          "developer_invoice": {
            "type": "boolean",
            "example": false,
            "description": "If true, this invoice has been created through the Developers API."
          },
          "developer_title": {
            "type": "string",
            "example": null,
            "description": "If a product_id is not passed through the Developers API, a title must be specified."
          },
          "developer_webhook": {
            "type": "string",
            "example": null,
            "description": "Additional webhook URL to which updates regarding this invoice will be sent."
          },
          "developer_return_url": {
            "type": "string",
            "example": null,
            "description": "If present, the customer will be redirected to this URL after the invoice has been paid."
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "VOIDED",
              "WAITING_FOR_CONFIRMATIONS",
              "PARTIAL",
              "CUSTOMER_DISPUTE_ONGOING",
              "REVERSED",
              "REFUNDED",
              "WAITING_SHOP_ACTION",
              "PROCESSING"
            ],
            "example": "COMPLETED",
            "description": "Status of the invoice."
          },
          "status_details": {
            "type": "string",
            "enum": [
              "CART_PARTIAL_OUT_OF_STOCK"
            ],
            "example": null,
            "description": "If CART_PARTIAL_OUT_OF_STOCK, the invoice has been completed but some products in the cart were out of stock."
          },
          "void_details": {
            "type": "string",
            "enum": [
              "PRODUCT_SOLD_OUT",
              "CART_PRODUCTS_SOLD_OUT"
            ],
            "example": null,
            "description": "If the invoice is VOIDED and the product (or all the products in the cart) were out of stock, this additional status is set."
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 0,
            "description": "If a coupon or volume_discount is used, the discount value presents the total amount of discount over the total cost of the invoice."
          },
          "fee_percentage": {
            "type": "integer",
            "example": 5,
            "description": "What cut does Sellix take out of the total. To learn more about Sellix fees please refer to https://sellix.io/fees."
          },
          "day_value": {
            "type": "integer",
            "description": "DEPRECATED: Day value, number.",
            "deprecated": true
          },
          "day": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the day name.",
            "deprecated": true
          },
          "month": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the month name.",
            "deprecated": true
          },
          "year": {
            "type": "integer",
            "description": "DEPRECATED: Year number.",
            "deprecated": true
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the blacklist."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the blacklist has been edited."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the blacklist has been edited."
          }
        }
      },
      "query": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-9fb8da67ba-0aa7b6",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this query belongs."
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the invoice this query is linked to, if specified by the customer."
          },
          "customer_email": {
            "type": "string",
            "example": "customer@gmail.com",
            "description": "Email of the customer who created this query."
          },
          "title": {
            "type": "string",
            "example": "I need help with this product",
            "description": "Query title, brief summary of what the customer needs."
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "CLOSED",
              "SHOP_REPLY",
              "CUSTOMER_REPLY"
            ],
            "example": "PENDING",
            "description": "Status of the query. PENDING if the query has been created and awaits a reply from the merchant. CLOSED if the query has been closed by the merchant or the customer. SHOP_REPLY if the query has been replied by the merchant, CUSTOMER_REPLY if the query has been replied by the customer."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/query_message"
            }
          },
          "day_value": {
            "type": "integer",
            "description": "DEPRECATED: Day value, number.",
            "deprecated": true
          },
          "day": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the day name.",
            "deprecated": true
          },
          "month": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the month name.",
            "deprecated": true
          },
          "year": {
            "type": "integer",
            "description": "DEPRECATED: Year number.",
            "deprecated": true
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the query."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the query has been updated."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the query has been edited."
          }
        }
      },
      "queryListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample-9fb8da67ba-0aa7b6",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this query belongs."
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the invoice this query is linked to, if specified by the customer."
          },
          "customer_email": {
            "type": "string",
            "example": "customer@gmail.com",
            "description": "Email of the customer who created this query."
          },
          "title": {
            "type": "string",
            "example": "I need help with this product",
            "description": "Query title, brief summary of what the customer needs."
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "CLOSED",
              "SHOP_REPLY",
              "CUSTOMER_REPLY"
            ],
            "example": "PENDING",
            "description": "Status of the query. PENDING if the query has been created and awaits a reply from the merchant. CLOSED if the query has been closed by the merchant or the customer. SHOP_REPLY if the query has been replied by the merchant, CUSTOMER_REPLY if the query has been replied by the customer."
          },
          "day_value": {
            "type": "integer",
            "description": "DEPRECATED: Day value, number.",
            "deprecated": true
          },
          "day": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the day name.",
            "deprecated": true
          },
          "month": {
            "type": "string",
            "description": "DEPRECATED: First three letters of the month name.",
            "deprecated": true
          },
          "year": {
            "type": "integer",
            "description": "DEPRECATED: Year number.",
            "deprecated": true
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the query."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Date, available if the query has been updated."
          },
          "updated_by": {
            "type": "integer",
            "example": 0,
            "description": "User ID, available if the query has been edited."
          }
        }
      },
      "query_message": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "CUSTOMER",
              "SHOP"
            ],
            "example": "CUSTOMER",
            "description": "Who this message belongs to; the customer or the merchant."
          },
          "message": {
            "type": "string",
            "example": "I really need some additional details on this..",
            "description": "Message left by the customer or merchant."
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "When the message was sent."
          }
        }
      },
      "cloudflare_image_id": {
        "type": "string",
        "example": "sample-c4f1-4f7c-9a1d-89120ed0c800",
        "description": "New field containing the cloudflare image ID of this product, replaces image_attachment and image_name. Format https://imagedelivery.net/95QNzrEeP7RU5l5WdbyrKw/<cloudflare_image_id>/<variant_name> where variant_name can be shopItem, avatar, icon, imageAvatarFeedback, public, productImageCart."
      },
      "crypto_transaction": {
        "type": "object",
        "properties": {
          "crypto_amount": {
            "type": "number",
            "format": "double",
            "example": 0.014174,
            "description": "Crypto amount sent in the transaction."
          },
          "hash": {
            "type": "string",
            "example": "234dB62Q3X9nyqussRSHW5x9rXe7NzyS3hLcwSTtzd9WLWfrHFUtX4KS6DAMyyHnvRgUNiqUvZdw2T9XWJqa8sPW",
            "description": "Crypto transaction hash."
          },
          "confirmations": {
            "type": "integer",
            "example": 1,
            "description": "Crypto transaction confirmations, not updated once the invoice status is COMPLETED or VOIDED."
          },
          "created_at": {
            "type": "integer",
            "example": 1640777734,
            "description": "Crypto transaction reception date."
          },
          "updated_at": {
            "type": "integer",
            "example": 1640673134,
            "description": "Crypto transaction update date."
          }
        }
      },
      "invoice_status": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 10726392,
            "description": "Unique ID of the invoice status."
          },
          "invoice_id": {
            "type": "string",
            "example": "sample-3ddfc9dc3d-ab2e36",
            "description": "Unique ID of the invoice this status is linked to."
          },
          "status": {
            "enum": [
              "PENDING",
              "COMPLETED",
              "VOIDED",
              "WAITING_FOR_CONFIRMATIONS",
              "PARTIAL",
              "CUSTOMER_DISPUTE_ONGOING",
              "REVERSED",
              "REFUNDED",
              "WAITING_SHOP_ACTION",
              "PROCESSING"
            ],
            "example": "COMPLETED",
            "description": "Status of the invoice."
          },
          "details": {
            "type": "string",
            "example": "The invoice has been flagged as completed and the product has been shipped.",
            "description": "Additional details on the status change."
          },
          "created_at": {
            "type": "integer",
            "example": 1640777796,
            "description": "Status change date."
          }
        }
      },
      "webhook": {
        "type": "object",
        "properties": {
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "sample29a0e39d",
            "description": "Unique ID of the webhook, used as reference across the API."
          },
          "url": {
            "type": "string",
            "example": "https://dev.sellix.io/v1/webhook",
            "description": "Webhook URL where the request has been sent."
          },
          "event": {
            "type": "string",
            "enum": [
              "order:created",
              "order:updated",
              "order:partial",
              "order:paid",
              "order:paid:product",
              "order:cancelled",
              "product:created",
              "product:stock",
              "product:edited",
              "product:dynamic",
              "query:created",
              "query:replied",
              "Feedback:received",
              "order:partial:product",
              "order:created:product",
              "order:disputed:product",
              "order:disputed",
              "order:cancelled:product",
              "order:updated:product",
              "subscription:trial:started",
              "subscription:trial:ended",
              "subscription:created",
              "subscription:updated",
              "subscription:renewed",
              "subscription:cancelled",
              "subscription:upcoming"
            ],
            "example": "order:paid",
            "description": "Webhook event type."
          },
          "retries": {
            "type": "integer",
            "example": 1,
            "description": "How many times a request has been tried."
          },
          "response_code": {
            "type": "integer",
            "example": 200,
            "description": "Webhook URL response code."
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Request sent date."
          },
          "payload": {
            "type": "string",
            "example": "{\"payload\":\"example\"}",
            "description": "JSON stringified webhook payload."
          },
          "response": {
            "type": "string",
            "example": "{\"response\":\"example\"}",
            "description": "JSON stringified webhook response."
          }
        }
      },
      "ip_info": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true,
            "description": "IP info retrieved successfully."
          },
          "message": {
            "type": "string",
            "example": "Success",
            "description": "Any other details linked to this IP."
          },
          "fraud_score": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "example": 25,
            "description": "IP Fraud Score details."
          },
          "country_code": {
            "type": "string",
            "example": "IT",
            "description": "IP country code."
          },
          "region": {
            "type": "string",
            "example": "Emilia Romagna",
            "description": "IP region."
          },
          "city": {
            "type": "string",
            "example": "Bologna",
            "description": "IP city."
          },
          "ISP": {
            "type": "string",
            "example": "Telecom TIM",
            "description": "IP ISP"
          },
          "ASN": {
            "type": "integer",
            "example": 308172,
            "description": "ISP ASN"
          },
          "operating_system": {
            "type": "string",
            "example": "Mac 10.16",
            "description": "Customer device operating system."
          },
          "browser": {
            "type": "string",
            "example": "Chrome 96.0",
            "description": "Customer device browser."
          },
          "organization": {
            "type": "string",
            "example": "Telecom TIM",
            "description": "IP organization."
          },
          "is_crawler": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected as a crawler."
          },
          "timezone": {
            "type": "string",
            "example": "Europe/Rome",
            "description": "Customer timezone."
          },
          "mobile": {
            "type": "boolean",
            "example": false,
            "description": "If true, the customer used a mobile device."
          },
          "host": {
            "type": "string",
            "example": "cust.vodafonedsl.it",
            "description": "ISP host."
          },
          "proxy": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected using a proxy."
          },
          "vpn": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected using a VPN."
          },
          "tor": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected using TOR."
          },
          "active_vpn": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has an active VPN connection."
          },
          "active_tor": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has an active TOR connection."
          },
          "device_brand": {
            "type": "string",
            "example": "Apple",
            "description": "Customer device brand."
          },
          "device_model": {
            "type": "string",
            "example": "N/A",
            "description": "Customer device model."
          },
          "recent_abuse": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected in an online abuse."
          },
          "bot_status": {
            "type": "boolean",
            "example": false,
            "description": "If true, the IP has been recently detected as a BOT."
          },
          "connection_type": {
            "type": "string",
            "example": "Residential",
            "description": "Customer connection type."
          },
          "abuse_velocity": {
            "type": "string",
            "example": "none",
            "description": "IP abuse velocity."
          },
          "zip_code": {
            "type": "string",
            "example": "N/A",
            "description": "If detected, customer ZIP code."
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "example": 1,
            "description": "IP latitude."
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "example": 2,
            "description": "IP longitude."
          },
          "request_id": {
            "type": "string",
            "example": "sampleN0vmX",
            "description": "IP request ID used for internal reference."
          }
        },
        "description": "Additional info on the customer IP."
      },
      "custom_fields_object": {
        "type": "object",
        "example": {
          "username": "sellix-user"
        },
        "description": "key-value JSON having as key the custom field name and as value the custom field value inserted by the customer. Custom fields can both be used as inputs from the customers but also as metadata for invoices, letting you pass hidden fields for internal referencing."
      },
      "custom_fields_array": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "text",
                "hidden",
                "number",
                "largetextbox",
                "checkbox"
              ],
              "example": "checkbox",
              "description": "Type of the custom field."
            },
            "name": {
              "type": "string",
              "example": "Read the ToS",
              "description": "Custom field name displayed to the customer."
            },
            "regex": {
              "type": "string",
              "example": null,
              "description": "Regex that the custom field value must match."
            },
            "placeholder": {
              "type": "string",
              "example": null,
              "description": "Placeholder for the custom field input."
            },
            "default": {
              "type": "string",
              "example": null,
              "description": "Default value if the customer leaves the input empty."
            },
            "required": {
              "type": "boolean",
              "example": false,
              "description": "Whether or not this custom field is required to proceed with the purchase."
            }
          }
        }
      },
      "payment_response_white_label": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "required": [
              "invoice"
            ],
            "properties": {
              "invoice": {
                "$ref": "#/components/schemas/invoice"
              }
            },
            "example": {
              "invoice": {
                "uniqid": "sample-4caac117ca-abeb80",
                "...": null
              }
            }
          },
          "message": {
            "type": "string",
            "example": "<success-message>"
          },
          "log": {
            "type": "object",
            "example": null
          },
          "error": {
            "type": "string",
            "example": null
          },
          "env": {
            "type": "string",
            "example": "production"
          }
        }
      },
      "payment_response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "required": [
              "url",
              "uniqid"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "Sellix hosted payment page."
              },
              "uniqid": {
                "type": "string",
                "format": "uuid",
                "description": "Unique ID of the invoice created for the payment."
              }
            },
            "example": {
              "url": "https://sellix.io/payment/sample-4caac117ca-abeb80",
              "uniqid": "sample-4caac117ca-abeb80"
            }
          },
          "message": {
            "type": "string",
            "example": "<success-message>"
          },
          "log": {
            "type": "object",
            "example": null
          },
          "error": {
            "type": "string",
            "example": null
          },
          "env": {
            "type": "string",
            "example": "production"
          }
        }
      },
      "subscription_trial_response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "required": [
              "invoice"
            ],
            "properties": {
              "subscription_id": {
                "type": "string",
                "description": "Subscription ID."
              }
            },
            "example": {
              "subscription_id": "rec_sample-4caac117ca-abeb80"
            }
          },
          "message": {
            "type": "string",
            "example": "<success-message>"
          },
          "log": {
            "type": "object",
            "example": null
          },
          "error": {
            "type": "string",
            "example": null
          },
          "env": {
            "type": "string",
            "example": "production"
          }
        }
      },
      "subscription_invoice_response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "required": [
              "url",
              "uniqid"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "Sellix hosted payment page."
              },
              "uniqid": {
                "type": "string",
                "format": "uuid",
                "description": "Unique ID of the invoice created for the subscription."
              }
            },
            "example": {
              "url": "https://sellix.io/payment/sample-4caac117ca-abeb80",
              "uniqid": "sample-4caac117ca-abeb80"
            }
          },
          "message": {
            "type": "string",
            "example": "<success-message>"
          },
          "log": {
            "type": "object",
            "example": null
          },
          "error": {
            "type": "string",
            "example": null
          },
          "env": {
            "type": "string",
            "example": "production"
          }
        }
      },
      "gateways": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "PAYPAL",
            "STRIPE",
            "SKRILL",
            "BITCOIN",
            "LITECOIN",
            "ETHEREUM",
            "BITCOIN_CASH",
            "PERFECT_MONEY",
            "CASH_APP",
            "LEX_HOLDINGS_GROUP",
            "PAYDASH",
            "NANO",
            "MONERO",
            "SOLANA",
            "RIPPLE"
          ]
        },
        "example": [
          "PAYPAL",
          "STRIPE",
          "BITCOIN"
        ]
      },
      "currency": {
        "type": "string",
        "enum": [
          "CAD",
          "HKD",
          "ISK",
          "PHP",
          "DKK",
          "HUF",
          "CZK",
          "GBP",
          "RON",
          "SEK",
          "IDR",
          "INR",
          "BRL",
          "RUB",
          "HRK",
          "JPY",
          "THB",
          "CHF",
          "EUR",
          "MYR",
          "BGN",
          "TRY",
          "CNY",
          "NOK",
          "NZD",
          "ZAR",
          "USD",
          "MXN",
          "SGD",
          "AUD",
          "ILS",
          "KRW",
          "PLN"
        ],
        "example": "EUR",
        "description": "Available currency."
      },
      "paypal_dispute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "PP-D-sample1379",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": "sample-bd73112377-6c0064",
            "description": "Unique ID of the invoice linked to this dispute."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this paypal dispute belongs."
          },
          "reason": {
            "type": "string",
            "enum": [
              "MERCHANDISE_OR_SERVICE_NOT_RECEIVED",
              "INCORRECT_AMOUNT",
              "MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED",
              "PAYMENT_BY_OTHER_MEANS",
              "UNAUTHORISED",
              "CANCELED_RECURRING_BILLING",
              "CREDIT_NOT_PROCESSED",
              "PROBLEM_WITH_REMITTANCE",
              "DUPLICATE_TRANSACTION",
              "OTHER"
            ],
            "example": "MERCHANDISE_OR_SERVICE_NOT_RECEIVED",
            "description": "The dispute reason is why the customer has opened a dispute against your order."
          },
          "status": {
            "type": "string",
            "enum": [
              "OPEN",
              "UNDER_REVIEW",
              "WAITING_FOR_BUYER_RESPONSE",
              "RESOLVED",
              "WAITING_FOR_SELLER_RESPONSE",
              "OTHER"
            ],
            "example": "WAITING_FOR_BUYER_RESPONSE",
            "description": "Each dispute is automatically updated when we receive an update from PayPal, the status indicates how it is going."
          },
          "outcome": {
            "type": "string",
            "enum": [
              "RESOLVED_BUYER_FAVOUR",
              "CANCELED_BY_BUYER",
              "RESOLVED_SELLER_FAVOUR",
              "ACCEPTED",
              "RESOLVED_WITH_PAYOUT",
              "DENIED",
              "NONE"
            ],
            "example": null,
            "description": "When a dispute it’s solved, its outcome is updated."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paypal_dispute_message"
            },
            "example": [
              {
                "posted_by": "SELLER",
                "content": "Hello your order is completed",
                "created_at": 1641033844
              }
            ]
          },
          "life_cycle_stage": {
            "type": "string",
            "enum": [
              "INQUIRY",
              "ARBITRATION",
              "CHARGEBACK",
              "PRE_ARBITRATION"
            ],
            "example": "INQUIRY",
            "description": "The stage in the dispute lifecycle."
          },
          "seller_response_due_date": {
            "type": "integer",
            "format": "timestamp",
            "example": 0,
            "description": "Within which date the seller needs to respond."
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "Creation date of the dispute."
          },
          "updated_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "When the dispute was updated."
          }
        }
      },
      "paypal_dispute_message": {
        "type": "object",
        "properties": {
          "posted_by": {
            "type": "string",
            "enum": [
              "BUYER",
              "ARBITER",
              "SELLER"
            ],
            "example": "SELLER",
            "description": "Indicates whether the customer, merchant, or dispute arbiter posted the message."
          },
          "content": {
            "type": "string",
            "example": "Hello your order is completed",
            "description": "The content of the dispute message."
          },
          "created_at": {
            "type": "integer",
            "format": "timestamp",
            "example": 162857125819,
            "description": "When the message was sent."
          }
        }
      },
      "license": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0,
            "description": "ID of the resource"
          },
          "uniqid": {
            "type": "string",
            "format": "uuid",
            "example": "546f3ede4f1ad",
            "description": "Unique ID of the resource, used as reference across the API."
          },
          "shop_id": {
            "type": "integer",
            "example": 0,
            "description": "The shop ID to which this license belongs."
          },
          "product_id": {
            "type": "integer",
            "example": 0,
            "description": "The product ID to which this license belongs."
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "example": null,
            "description": "Unique ID of the invoice this license is linked to."
          },
          "license_key": {
            "type": "string",
            "example": "LICENSE-SAMPLE-00",
            "description": "License key."
          },
          "hardware_id": {
            "type": "string",
            "example": "098H52ST479QE053V2",
            "description": "Hardware ID."
          },
          "uses": {
            "type": "integer",
            "example": 0,
            "description": "Number of uses for this license, this value is increased at every license check."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-02 12:09:00",
            "description": "Expiration date of the license."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-25 07:21:57",
            "description": "Creation date of the license."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-25 07:21:57",
            "description": "Date, available if the license has been updated."
          }
        }
      }
    },
    "parameters": {
      "uniqid": {
        "in": "path",
        "name": "uniqid",
        "schema": {
          "type": "string"
        },
        "required": true,
        "example": "sample29a0e39d",
        "description": "Uniqid of the resource"
      },
      "id": {
        "in": "path",
        "name": "id",
        "schema": {
          "type": "string"
        },
        "required": true,
        "example": "sample6978a0e39d",
        "description": "ID of the resource"
      }
    },
    "responses": {
      "200": {
        "description": "SUCCESS_MESSAGE",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": "<success-message>"
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "UNAUTHORIZED",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": "unauthorized"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "FORBIDDEN",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 403
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": "forbidden"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "NOT_FOUND",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "example": null
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": "NOT_FOUND"
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "blacklistListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "blacklists": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/blacklist"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "blacklist": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "blacklist": {
                      "$ref": "#/components/schemas/blacklist"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "whitelistListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "whitelists": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/whitelist"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "whitelist": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "whitelist": {
                      "$ref": "#/components/schemas/whitelist"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "categoryListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/category"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "category": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/category"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "couponListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "coupons": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/coupon"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "coupon": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "coupon": {
                      "$ref": "#/components/schemas/coupon"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "feedbackListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "feedback": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/feedbackListing"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "feedback": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "feedback": {
                      "$ref": "#/components/schemas/feedback"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "invoiceListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/invoiceListing"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "invoice": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/invoice"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "productListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/product"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "product": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/product"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "queryListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "queries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/queryListing"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "query": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "query": {
                      "$ref": "#/components/schemas/query"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "payment": {
        "description": "payment creation response",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_response"
                },
                {
                  "$ref": "#/components/schemas/payment_response_white_label"
                }
              ]
            }
          }
        }
      },
      "customerListing": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/customer"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "customer": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "customer": {
                      "$ref": "#/components/schemas/customer"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "customerCreated": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "customer_id": {
                      "type": "string",
                      "example": "cus_87b8as6ba9125",
                      "description": "Customer ID"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "customers": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "customers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/customer"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "subscription": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "subscription": {
                      "$ref": "#/components/schemas/subscription"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "subscriptionInvoiceCreated": {
        "description": "subscription creation response",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/subscription_trial_response"
                },
                {
                  "$ref": "#/components/schemas/subscription_invoice_response"
                }
              ]
            }
          }
        }
      },
      "subscriptions": {
        "description": "resource retrieved",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "subscriptions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/subscriptionListing"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      },
      "license": {
        "description": "license object",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/license"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": null
                },
                "log": {
                  "type": "object",
                  "example": null
                },
                "error": {
                  "type": "string",
                  "example": null
                },
                "env": {
                  "type": "string",
                  "example": "production"
                }
              }
            }
          }
        }
      }
    }
  }
}
